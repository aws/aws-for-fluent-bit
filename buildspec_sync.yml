version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.7
  pre_build:
    commands:
      - echo Sync latest image from Amazon ECR Public Gallery
      - pip3 uninstall awscli -y
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip awscliv2.zip
      - ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/bin --update
      - which aws
      - aws --version
  build:
    commands:
      # Note: The "sync" task is used both on the primary distribution account
      #       and replica accounts. In the primary account, it is used for stable
      #       tag updates exclusively and their respective ssm param updates.
      #
      #       In the replica accounts, it is used for replicating images to regional
      #       Private ECRs from the primary Public ECR, and replicating ssm params.
      - export AWS_ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
      
      # Enforce STS regional endpoints
      - export AWS_STS_REGIONAL_ENDPOINTS=regional

      # Replica accounts: Private ECR sync
      - './scripts/publish.sh cicd-replicate ${AWS_REGION}'

      # Primary account: Private ECR stable update
      - './scripts/publish.sh cicd-publish private-ecr-stable'
      - './scripts/publish.sh cicd-publish dockerhub-stable'
        # Assume role to publish, get the credentials, and set them as environment variables
      - |
        if [ "${PUBLISH_ROLE_ARN_PUBLIC_ECR}" != "" ]; then
          CREDS=`aws sts assume-role --role-arn ${PUBLISH_ROLE_ARN_PUBLIC_ECR} --role-session-name publicECR`
          export AWS_ACCESS_KEY_ID=`echo $CREDS | jq -r .Credentials.AccessKeyId`
          export AWS_SECRET_ACCESS_KEY=`echo $CREDS | jq -r .Credentials.SecretAccessKey`
          export AWS_SESSION_TOKEN=`echo $CREDS | jq -r .Credentials.SessionToken`
        fi
      - './scripts/publish.sh cicd-publish public-ecr-stable'
        # Nullify the temporary credentials for the assumed role to publish
      - |
        if [ "${PUBLISH_ROLE_ARN_PUBLIC_ECR}" != "" ]; then
          export AWS_ACCESS_KEY_ID=
          export AWS_SECRET_ACCESS_KEY=
          export AWS_SESSION_TOKEN=
        fi

      # Assume role to verify, get the credentials, and set them as environment variables.
      # Verification should be done using the credentials from a different account. It ensures that
      # the images we published are public and accessible from any account.
      - CREDS=`aws sts assume-role --role-arn ${VERIFY_ROLE_ARN} --role-session-name ${AWS_REGION} --region ${AWS_REGION}`
      - export AWS_ACCESS_KEY_ID=`echo $CREDS | jq -r .Credentials.AccessKeyId`
      - export AWS_SECRET_ACCESS_KEY=`echo $CREDS | jq -r .Credentials.SecretAccessKey`
      - export AWS_SESSION_TOKEN=`echo $CREDS | jq -r .Credentials.SessionToken`

      # Replica accounts: Verify from the verification account
      - './scripts/publish.sh cicd-verify-replicate ${AWS_REGION}'

      # Primary account: Verify stable update
      - './scripts/publish.sh cicd-verify-publish private-ecr-stable'

      # Note: stable updates on primary account and sync task includes SSM updates

      # Replica & primary accounts: Verify ssm update
      - './scripts/publish.sh cicd-verify-ssm ${AWS_REGION} true'

      # Nullify the temporary credentials for the assumed role to verify
      - export AWS_ACCESS_KEY_ID=
      - export AWS_SECRET_ACCESS_KEY=
      - export AWS_SESSION_TOKEN=

      # Run verification in the pipeline account
      - './scripts/publish.sh cicd-verify-publish dockerhub-stable'
      - './scripts/publish.sh cicd-verify-publish public-ecr-stable'

artifacts:
  files:
    - '**/*'
